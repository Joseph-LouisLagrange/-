<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.alpha.classpie.dao.UserCourseMapper">
  <resultMap id="BaseResultMap" type="com.alpha.classpie.pojo.UserCourse">
    <constructor>
      <idArg column="user_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <idArg column="course_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="role_id" jdbcType="INTEGER" select="com.alpha.classpie.dao.RoleMapper.selectByPrimaryKey"/>
      <arg column="is_archive" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="course_order" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="business_card" javaType="java.lang.String" jdbcType="VARCHAR" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    user_id, course_id, role_id, is_archive, course_order, business_card
  </sql>
  <select id="selectByExample" parameterType="com.alpha.classpie.example.UserCourseExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user_course
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="com.alpha.classpie.pojo.UserCourseKey" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from user_course
    where user_id = #{userId,jdbcType=INTEGER}
      and course_id = #{courseId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.alpha.classpie.pojo.UserCourseKey">
    delete from user_course
    where user_id = #{userId,jdbcType=INTEGER}
      and course_id = #{courseId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.alpha.classpie.example.UserCourseExample">
    delete from user_course
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.alpha.classpie.pojo.UserCourse">
    insert into user_course (user_id, course_id, role_id,
      is_archive, course_order, business_card
      )
    values (#{userId,jdbcType=INTEGER}, #{courseId,jdbcType=INTEGER}, #{roleId,jdbcType=INTEGER},
      #{isArchive,jdbcType=BIT}, #{courseOrder,jdbcType=INTEGER}, #{businessCard,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.alpha.classpie.pojo.UserCourse">
    insert into user_course
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="courseId != null">
        course_id,
      </if>
      <if test="roleId != null">
        role_id,
      </if>
      <if test="isArchive != null">
        is_archive,
      </if>
      <if test="courseOrder != null">
        course_order,
      </if>
      <if test="businessCard != null">
        business_card,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="courseId != null">
        #{courseId,jdbcType=INTEGER},
      </if>
      <if test="roleId != null">
        #{roleId,jdbcType=INTEGER},
      </if>
      <if test="isArchive != null">
        #{isArchive,jdbcType=BIT},
      </if>
      <if test="courseOrder != null">
        #{courseOrder,jdbcType=INTEGER},
      </if>
      <if test="businessCard != null">
        #{businessCard,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.alpha.classpie.example.UserCourseExample" resultType="java.lang.Long">
    select count(*) from user_course
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <select id="getMaxOrderByUserId" resultType="java.lang.Integer">
    select MAX(course_order) from user_course where user_id=#{userId}
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user_course
    <set>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.courseId != null">
        course_id = #{record.courseId,jdbcType=INTEGER},
      </if>
      <if test="record.roleId != null">
        role_id = #{record.roleId,jdbcType=INTEGER},
      </if>
      <if test="record.isArchive != null">
        is_archive = #{record.isArchive,jdbcType=BIT},
      </if>
      <if test="record.courseOrder != null">
        course_order = #{record.courseOrder,jdbcType=INTEGER},
      </if>
      <if test="record.businessCard != null">
        business_card = #{record.businessCard,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user_course
    set user_id = #{record.userId,jdbcType=INTEGER},
      course_id = #{record.courseId,jdbcType=INTEGER},
      role_id = #{record.roleId,jdbcType=INTEGER},
      is_archive = #{record.isArchive,jdbcType=BIT},
      course_order = #{record.courseOrder,jdbcType=INTEGER},
      business_card = #{record.businessCard,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.alpha.classpie.pojo.UserCourse">
    update user_course
    <set>
      <if test="roleId != null">
        role_id = #{roleId,jdbcType=INTEGER},
      </if>
      <if test="isArchive != null">
        is_archive = #{isArchive,jdbcType=BIT},
      </if>
      <if test="courseOrder != null">
        course_order = #{courseOrder,jdbcType=INTEGER},
      </if>
      <if test="businessCard != null">
        business_card = #{businessCard,jdbcType=VARCHAR},
      </if>
    </set>
    where user_id = #{userId,jdbcType=INTEGER}
      and course_id = #{courseId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.alpha.classpie.pojo.UserCourse">
    update user_course
    set role_id = #{roleId,jdbcType=INTEGER},
      is_archive = #{isArchive,jdbcType=BIT},
      course_order = #{courseOrder,jdbcType=INTEGER},
      business_card = #{businessCard,jdbcType=VARCHAR}
    where user_id = #{userId,jdbcType=INTEGER}
      and course_id = #{courseId,jdbcType=INTEGER}
  </update>
</mapper>
