<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.alpha.classpie.dao.TaskNoticeMapper">
  <resultMap id="BaseResultMap" type="com.alpha.classpie.pojo.task.TaskNotice">
    <constructor>
      <idArg column="notice_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="task_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="type" javaType="java.lang.String" jdbcType="CHAR" />
      <arg column="notice_id" select="com.alpha.classpie.dao.NoticeMapper.selectByPrimaryKey" javaType="com.alpha.classpie.pojo.Notice"/>
    </constructor>
  </resultMap>
  <resultMap id="PowerResultMap" type="com.alpha.classpie.pojo.task.TaskNotice" autoMapping="true">
      <id property="noticeId" column="notice_id" javaType="java.lang.Integer" jdbcType="INTEGER"/>
      <result property="taskId" column="task_id" javaType="java.lang.Integer" jdbcType="INTEGER"/>
      <result property="type" column="type" javaType="java.lang.String" jdbcType="CHAR"/>
      <result property="id" column="id" javaType="java.lang.Integer" jdbcType="INTEGER"/>
     <result property="userId" column="user_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
     <result property="title" column="title" javaType="java.lang.String" jdbcType="VARCHAR" />
      <result property="isRead" column="is_read" javaType="java.lang.Boolean" jdbcType="BIT" />
     <result property="content" column="content" javaType="java.lang.String" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    notice_id, task_id, type
  </sql>
  <select id="selectByExample" parameterType="com.alpha.classpie.example.TaskNoticeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from task_notice
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from task_notice
    where notice_id = #{noticeId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from task_notice
    where notice_id = #{noticeId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.alpha.classpie.example.TaskNoticeExample">
    delete from task_notice
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.alpha.classpie.pojo.task.TaskNotice">
    insert into task_notice (notice_id, task_id, type
      )
    values (#{noticeId,jdbcType=INTEGER}, #{taskId,jdbcType=INTEGER}, #{type,jdbcType=CHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.alpha.classpie.pojo.task.TaskNotice">
    insert into task_notice
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="noticeId != null">
        notice_id,
      </if>
      <if test="taskId != null">
        task_id,
      </if>
      <if test="type != null">
        type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="noticeId != null">
        #{noticeId,jdbcType=INTEGER},
      </if>
      <if test="taskId != null">
        #{taskId,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        #{type,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.alpha.classpie.example.TaskNoticeExample" resultType="java.lang.Long">
    select count(*) from task_notice
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <select id="getNoReadTaskNoticeByUserId" resultMap="BaseResultMap">
        select <include refid="Base_Column_List"></include> from task_notice as tn left join notice as n on
         tn.notice_id=n.id where user_id=#{userId} and is_read=0
  </select>
  <select id="getAllTaskNoticeByUserId" resultMap="BaseResultMap">
    select <include refid="Base_Column_List"></include> from task_notice as tn left join notice as n on
    tn.notice_id=n.id where user_id=#{userId}
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update task_notice
    <set>
      <if test="record.noticeId != null">
        notice_id = #{record.noticeId,jdbcType=INTEGER},
      </if>
      <if test="record.taskId != null">
        task_id = #{record.taskId,jdbcType=INTEGER},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=CHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update task_notice
    set notice_id = #{record.noticeId,jdbcType=INTEGER},
      task_id = #{record.taskId,jdbcType=INTEGER},
      type = #{record.type,jdbcType=CHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.alpha.classpie.pojo.task.TaskNotice">
    update task_notice
    <set>
      <if test="taskId != null">
        task_id = #{taskId,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=CHAR},
      </if>
    </set>
    where notice_id = #{noticeId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.alpha.classpie.pojo.task.TaskNotice">
    update task_notice
    set task_id = #{taskId,jdbcType=INTEGER},
      type = #{type,jdbcType=CHAR}
    where notice_id = #{noticeId,jdbcType=INTEGER}
  </update>
</mapper>
