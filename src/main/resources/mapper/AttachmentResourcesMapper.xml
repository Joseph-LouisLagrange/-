<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.alpha.classpie.dao.AttachmentResourcesMapper">
  <resultMap id="BaseResultMap" type="com.alpha.classpie.pojo.file.AttachmentResources">
    <constructor>
      <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="download_count" javaType="java.lang.Long" jdbcType="BIGINT" />
      <arg column="course_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="user_file_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, download_count, course_id, user_file_id
  </sql>
  <select id="selectByExample" parameterType="com.alpha.classpie.example.AttachmentResourcesExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from attachment_resources
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from attachment_resources
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from attachment_resources
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.alpha.classpie.example.AttachmentResourcesExample">
    delete from attachment_resources
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.alpha.classpie.pojo.file.AttachmentResources" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
    insert into attachment_resources ( download_count, course_id,
      user_file_id)
    values (#{downloadCount,jdbcType=BIGINT}, #{courseId,jdbcType=INTEGER},
      #{userFileId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.alpha.classpie.pojo.file.AttachmentResources">
    insert into attachment_resources
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="downloadCount != null">
        download_count,
      </if>
      <if test="courseId != null">
        course_id,
      </if>
      <if test="userFileId != null">
        user_file_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="downloadCount != null">
        #{downloadCount,jdbcType=BIGINT},
      </if>
      <if test="courseId != null">
        #{courseId,jdbcType=INTEGER},
      </if>
      <if test="userFileId != null">
        #{userFileId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.alpha.classpie.example.AttachmentResourcesExample" resultType="java.lang.Long">
    select count(*) from attachment_resources
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <select id="getChildren" resultMap="BaseResultMap">
    select ar.id, ar.download_count, ar.course_id, ar.user_file_id
    from attachment_resources as ar left join user_file as uf on ar.user_file_id=uf.id
    <where>
      <if test="userFileId==null">
        superior_folder_id is null
      </if>
      <if test="userFileId!=null">
        superior_folder_id =#{userFileId}
      </if>
        and course_id=#{courseId}
    </where>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update attachment_resources
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.downloadCount != null">
        download_count = #{record.downloadCount,jdbcType=BIGINT},
      </if>
      <if test="record.courseId != null">
        course_id = #{record.courseId,jdbcType=INTEGER},
      </if>
      <if test="record.userFileId != null">
        user_file_id = #{record.userFileId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update attachment_resources
    set id = #{record.id,jdbcType=INTEGER},
      download_count = #{record.downloadCount,jdbcType=BIGINT},
      course_id = #{record.courseId,jdbcType=INTEGER},
      user_file_id = #{record.userFileId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.alpha.classpie.pojo.file.AttachmentResources">
    update attachment_resources
    <set>
      <if test="downloadCount != null">
        download_count = #{downloadCount,jdbcType=BIGINT},
      </if>
      <if test="courseId != null">
        course_id = #{courseId,jdbcType=INTEGER},
      </if>
      <if test="userFileId != null">
        user_file_id = #{userFileId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.alpha.classpie.pojo.file.AttachmentResources">
    update attachment_resources
    set download_count = #{downloadCount,jdbcType=BIGINT},
      course_id = #{courseId,jdbcType=INTEGER},
      user_file_id = #{userFileId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="selfIncreasingDownloadCount">
    update attachment_resources set download_count=download_count+1 where id=#{id,jdbcType=INTEGER}
  </update>
</mapper>
