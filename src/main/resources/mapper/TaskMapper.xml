<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.alpha.classpie.dao.TaskMapper">
  <resultMap id="BaseResultMap" type="com.alpha.classpie.pojo.task.Task">
    <constructor>
      <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="course_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="name" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="deadline" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="full_marks" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="is_check_duplicate" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="promulgator" javaType="java.lang.Integer" jdbcType="INTEGER" />
    </constructor>
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.alpha.classpie.pojo.task.Task">
    <constructor>
      <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="course_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="name" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="deadline" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="full_marks" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="is_check_duplicate" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="promulgator" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="resume" javaType="java.lang.String" jdbcType="LONGVARCHAR" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, course_id, name, deadline, full_marks, is_check_duplicate, promulgator
  </sql>
  <sql id="Blob_Column_List">
    resume
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.alpha.classpie.example.TaskExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from task
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.alpha.classpie.example.TaskExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from task
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from task
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from task
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.alpha.classpie.example.TaskExample">
    delete from task
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.alpha.classpie.pojo.task.Task">
    insert into task (id, course_id, name,
      deadline, full_marks, is_check_duplicate,
      promulgator, resume)
    values (#{id,jdbcType=INTEGER}, #{courseId,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR},
      #{deadline,jdbcType=TIMESTAMP}, #{fullMarks,jdbcType=INTEGER}, #{isCheckDuplicate,jdbcType=BIT},
      #{promulgator,jdbcType=INTEGER}, #{resume,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.alpha.classpie.pojo.task.Task">
    insert into task
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="courseId != null">
        course_id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="deadline != null">
        deadline,
      </if>
      <if test="fullMarks != null">
        full_marks,
      </if>
      <if test="isCheckDuplicate != null">
        is_check_duplicate,
      </if>
      <if test="promulgator != null">
        promulgator,
      </if>
      <if test="resume != null">
        resume,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="courseId != null">
        #{courseId,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="deadline != null">
        #{deadline,jdbcType=TIMESTAMP},
      </if>
      <if test="fullMarks != null">
        #{fullMarks,jdbcType=INTEGER},
      </if>
      <if test="isCheckDuplicate != null">
        #{isCheckDuplicate,jdbcType=BIT},
      </if>
      <if test="promulgator != null">
        #{promulgator,jdbcType=INTEGER},
      </if>
      <if test="resume != null">
        #{resume,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.alpha.classpie.example.TaskExample" resultType="java.lang.Long">
    select count(*) from task
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update task
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.courseId != null">
        course_id = #{record.courseId,jdbcType=INTEGER},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.deadline != null">
        deadline = #{record.deadline,jdbcType=TIMESTAMP},
      </if>
      <if test="record.fullMarks != null">
        full_marks = #{record.fullMarks,jdbcType=INTEGER},
      </if>
      <if test="record.isCheckDuplicate != null">
        is_check_duplicate = #{record.isCheckDuplicate,jdbcType=BIT},
      </if>
      <if test="record.promulgator != null">
        promulgator = #{record.promulgator,jdbcType=INTEGER},
      </if>
      <if test="record.resume != null">
        resume = #{record.resume,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update task
    set id = #{record.id,jdbcType=INTEGER},
      course_id = #{record.courseId,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      deadline = #{record.deadline,jdbcType=TIMESTAMP},
      full_marks = #{record.fullMarks,jdbcType=INTEGER},
      is_check_duplicate = #{record.isCheckDuplicate,jdbcType=BIT},
      promulgator = #{record.promulgator,jdbcType=INTEGER},
      resume = #{record.resume,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update task
    set id = #{record.id,jdbcType=INTEGER},
      course_id = #{record.courseId,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      deadline = #{record.deadline,jdbcType=TIMESTAMP},
      full_marks = #{record.fullMarks,jdbcType=INTEGER},
      is_check_duplicate = #{record.isCheckDuplicate,jdbcType=BIT},
      promulgator = #{record.promulgator,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.alpha.classpie.pojo.task.Task">
    update task
    <set>
      <if test="courseId != null">
        course_id = #{courseId,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="deadline != null">
        deadline = #{deadline,jdbcType=TIMESTAMP},
      </if>
      <if test="fullMarks != null">
        full_marks = #{fullMarks,jdbcType=INTEGER},
      </if>
      <if test="isCheckDuplicate != null">
        is_check_duplicate = #{isCheckDuplicate,jdbcType=BIT},
      </if>
      <if test="promulgator != null">
        promulgator = #{promulgator,jdbcType=INTEGER},
      </if>
      <if test="resume != null">
        resume = #{resume,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.alpha.classpie.pojo.task.Task">
    update task
    set course_id = #{courseId,jdbcType=INTEGER},
      name = #{name,jdbcType=VARCHAR},
      deadline = #{deadline,jdbcType=TIMESTAMP},
      full_marks = #{fullMarks,jdbcType=INTEGER},
      is_check_duplicate = #{isCheckDuplicate,jdbcType=BIT},
      promulgator = #{promulgator,jdbcType=INTEGER},
      resume = #{resume,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.alpha.classpie.pojo.task.Task">
    update task
    set course_id = #{courseId,jdbcType=INTEGER},
      name = #{name,jdbcType=VARCHAR},
      deadline = #{deadline,jdbcType=TIMESTAMP},
      full_marks = #{fullMarks,jdbcType=INTEGER},
      is_check_duplicate = #{isCheckDuplicate,jdbcType=BIT},
      promulgator = #{promulgator,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>
